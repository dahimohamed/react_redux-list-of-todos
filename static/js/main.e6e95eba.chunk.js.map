{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","intialState","filterReducer","todos","initialState","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","filteredTodos","todosToFilter","queryToFilter","trimmedQuery","toLowerCase","trim","title","includes","completed","prepareTodos","length","className","map","id","classNames","onClick","selectTodo","TodoFilter","useState","setQuery","setFilterStatus","setFilterQuery","applyDebounce","debounce","value","onChange","event","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getUser","userId","Loader","TodoModal","user","setUser","isLoading","setLoading","didload","setLoaded","hasError","setError","useEffect","loadUser","a","userFromServer","showTodoInfo","closeModal","href","email","name","App","isLoadingFailed","setLoadingFailed","loadTodos","todosFromServer","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e6e95eba.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype FliterQueryAction = {\n  type: 'query/SET',\n  payload: string,\n};\n\ntype FliterStatusAction = {\n  type: 'status/SET',\n  payload: Status,\n};\n\nconst setFilterQuery = (query: string): FliterQueryAction => ({\n  type: 'query/SET',\n  payload: query,\n});\n\nconst setFilterStatus = (status: Status): FliterStatusAction => ({\n  type: 'status/SET',\n  payload: status,\n});\n\nexport const actions = { setFilterQuery, setFilterStatus };\n\ntype State = { query: string, status: Status };\ntype Action = FliterQueryAction | FliterStatusAction;\n\nconst intialState: State = { query: '', status: 'all' };\n\nconst filterReducer = (\n  state: State = intialState,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'query/SET':\n      return {\n        ...state,\n        query: action.payload,\n      };\n    case 'status/SET':\n      return {\n        ...state,\n        status: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET',\n  payload: Todo[],\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\nconst initialState: Todo[] = [];\n\ntype State = Todo[];\ntype Action = SetTodosAction;\n\nconst todosReducer = (\n  state: State = initialState,\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return [...state, ...action.payload];\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const query = useAppSelector(state => state.filter.query);\n  const status = useAppSelector(state => state.filter.status);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const prepareTodos = (todosToFilter: Todo[], queryToFilter: string) => {\n    let filteredTodos = [...todosToFilter];\n    const trimmedQuery = queryToFilter.toLowerCase().trim();\n\n    if (queryToFilter) {\n      filteredTodos = filteredTodos.filter(\n        todo => todo.title.toLowerCase().includes(trimmedQuery),\n      );\n    }\n\n    filteredTodos = filteredTodos.filter(({ completed }) => {\n      switch (status) {\n        case 'active':\n          return !completed;\n        case 'completed':\n          return completed;\n        default:\n          return true;\n      }\n    });\n\n    return filteredTodos;\n  };\n\n  const filteredTodos = prepareTodos(todos, query);\n\n  const selectTodo = (todo: Todo) => {\n    dispatch(actions.setTodo(todo));\n  };\n\n  return (\n    <>\n      {!filteredTodos.length ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {filteredTodos.map(todo => (\n              <tr\n                data-cy=\"todo\"\n                key={todo.id}\n              >\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p className={classNames('has-text-success', {\n                    'has-text-danger': !todo.completed,\n                  })}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => selectTodo(todo)}\n                  >\n                    <span className=\"icon\">\n                      <i className={classNames('far', {\n                        'fa-eye': todo.id !== currentTodo?.id,\n                        'fa-eye-slash': todo.id === currentTodo?.id,\n                      })}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n\n    </>\n  );\n};\n","import { useState } from 'react';\nimport debounce from 'lodash/debounce';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const [query, setQuery] = useState('');\n  const dispatch = useAppDispatch();\n  const status = useAppSelector(state => state.filter.status);\n  const { setFilterStatus, setFilterQuery } = actions;\n\n  const applyDebounce = debounce((value: string) => {\n    dispatch(setFilterQuery(value));\n  }, 500);\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    applyDebounce(event.target.value);\n    setQuery(event.target.value);\n  };\n\n  const filterByStatus = (\n    event: React.ChangeEvent<HTMLSelectElement>,\n  ) => {\n    dispatch(setFilterStatus(event.target.value as Status));\n  };\n\n  const clearQuery = () => {\n    dispatch(setFilterQuery(''));\n    setQuery('');\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={filterByStatus}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">\n              Completed\n            </option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={clearQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setLoading] = useState(false);\n  const [didload, setLoaded] = useState(false);\n  const [hasError, setError] = useState(false);\n  const dispatch = useAppDispatch();\n  const {\n    userId,\n    completed,\n    id,\n    title,\n  } = useAppSelector(state => state.currentTodo) as Todo;\n\n  useEffect(() => {\n    const loadUser = async () => {\n      setLoading(true);\n      try {\n        const userFromServer = await getUser(userId);\n\n        setUser(userFromServer);\n        setLoaded(true);\n      } catch (err) {\n        setError(true);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadUser();\n  }, [id]);\n\n  const showTodoInfo = !isLoading && !hasError && didload;\n\n  const closeModal = () => {\n    dispatch(actions.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading && <Loader />}\n\n      {showTodoInfo && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p\n              className=\"block\"\n              data-cy=\"modal-title\"\n            >\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>)}\n              {' by '}\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n\n      {hasError && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p\n              className=\"block has-text-danger\"\n            >\n              User is not found!\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [isLoadingFailed, setLoadingFailed] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const dispatch = useAppDispatch();\n\n  const loadTodos = async () => {\n    setLoading(true);\n    try {\n      const todosFromServer = await getTodos();\n\n      dispatch(actions.setTodos(todosFromServer));\n    } catch {\n      setLoadingFailed(true);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && (\n                <Loader />\n              )}\n\n              {isLoadingFailed && (\n                <p>No todos were loaded!</p>\n              )}\n\n              {!isLoading && !isLoadingFailed && (\n                <TodoList />\n              )}\n\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}